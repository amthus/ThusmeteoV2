// // Code du contrÔøΩleur principal 

// import 'package:get/get.dart';
// import 'package:ThusmeteoV2/app/services/api_service.dart';
// import 'package:ThusmeteoV2/app/modules/home/models/weather_data.dart';

// class AppController extends GetxController {
//   final currentPage = 0.obs;
//   final _weatherData = <String, WeatherData>{}.obs;

//   void changePage(int index) {
//     currentPage.value = index;
//   }

//   void fetchWeatherData(String city, String imgUrl) async {
//     try {
//       final data = await ApiService.getWeatherData(city);
//       data.cityImgUrl = imgUrl;
//       _weatherData[city] = data;
//       print("api success");
//     } catch (e) {
//       Get.snackbar('Error', 'Failed to fetch weather data for $city');
//       print("api failure");
//       print(e);
//     }
//   }

//   WeatherData? getWeatherDataForCity(String city) {
//     return _weatherData[city];
//   }

//   List<String> get addedCities => _weatherData.keys.toList();
// }

// import 'package:get/get.dart';
// import 'package:ThusmeteoV2/app/services/api_service.dart';
// import 'package:ThusmeteoV2/app/modules/home/models/weather_data.dart';
// import 'package:ThusmeteoV2/app/modules/home/models/forecast.dart';  // Import Forecast

// class AppController extends GetxController {
//   final currentPage = 0.obs;
//   final _weatherData = <String, WeatherData>{}.obs;  // Stocke la m√©t√©o actuelle
//   final _forecastData = <String, List<Forecast>>{}.obs;  // Stocke les pr√©visions pour chaque ville

//   void changePage(int index) {
//     currentPage.value = index;
//   }

//   // R√©cup√©rer la m√©t√©o actuelle
//   void fetchWeatherData(String city, String imgUrl) async {
//     try {
//       final data = await ApiService.getWeatherData(city);
//       data.cityImgUrl = imgUrl;
//       _weatherData[city] = data;
//       print("M√©t√©o actuelle r√©cup√©r√©e avec succ√®s");
//     } catch (e) {
//       Get.snackbar('Error', 'Failed to fetch weather data for $city');
//       print("√âchec r√©cup√©ration m√©t√©o actuelle");
//       print(e);
//     }
//   }

//   // R√©cup√©rer les pr√©visions m√©t√©orologiques pour plusieurs jours
//   void fetchForecastData(String city) async {
//     try {
//       final forecast = await ApiService.getForecastData(city);
//       _forecastData[city] = forecast.forecast; // Ajouter les pr√©visions dans l'√©tat
//       print("Pr√©visions r√©cup√©r√©es avec succ√®s");
//     } catch (e) {
//       Get.snackbar('Error', 'Failed to fetch forecast data for $city');
//       print("√âchec r√©cup√©ration des pr√©visions");
//       print(e);
//     }
//   }

//   // Obtenir la m√©t√©o actuelle pour une ville
//   WeatherData? getWeatherDataForCity(String city) {
//     return _weatherData[city];
//   }

//   // Obtenir les pr√©visions pour une ville
//   List<Forecast>? getForecastDataForCity(String city) {
//     return _forecastData[city];
//   }

//   // Obtenir la liste des villes ajout√©es
//   List<String> get addedCities => _weatherData.keys.toList();
// }

import 'package:get/get.dart';
import 'package:thusmeteo_v2/app/services/api_service.dart';
import 'package:thusmeteo_v2/app/modules/home/models/weather_data.dart';
import 'package:thusmeteo_v2/app/modules/home/models/forecast.dart';

class AppController extends GetxController {
  final currentPage = 0.obs;

  // Stockage des donn√©es m√©t√©o et pr√©visions sous forme de RxMap
  final RxMap<String, WeatherData> _weatherData = <String, WeatherData>{}.obs;
  final RxMap<String, List<Forecast>> _forecastData = <String, List<Forecast>>{}.obs;

  // R√©cup√©rer les donn√©es m√©t√©o d'une ville
  WeatherData? getWeatherDataForCity(String city) => _weatherData[city];

  // R√©cup√©rer les pr√©visions m√©t√©o d'une ville
  List<Forecast> getForecastDataForCity(String city) => _forecastData[city] ?? [];

  // Liste des villes ajout√©es
  List<String> get addedCities => _weatherData.keys.toList();

  // Changer de page
  void changePage(int index) {
    currentPage.value = index;
  }

  // R√©cup√©rer les donn√©es m√©t√©o
  void fetchWeatherData(String city, String imgUrl) async {
    try {
      final data = await ApiService.getWeatherData(city);
      data.cityImgUrl = imgUrl;

      _weatherData[city] = data;  
      _weatherData.refresh();  

      print("M√©t√©o r√©cup√©r√©e avec succ√®s pour $city");
    } catch (e) {
      Get.snackbar('Erreur', 'Impossible de r√©cup√©rer la m√©t√©o pour $city');
      print("√âchec de r√©cup√©ration m√©t√©o : $e");
    }
  }

  // R√©cup√©rer les pr√©visions m√©t√©o
void fetchForecastData(String city) async {
  try {
    final forecastResponse = await ApiService.getForecastData(city);

    // Met √† jour les pr√©visions dans le Map
    _forecastData[city] = forecastResponse.forecast;

    _forecastData.refresh();  // üîÑ Forcer la mise √† jour en Web
    print("‚úÖ Pr√©visions r√©cup√©r√©es avec succ√®s pour $city");
  } catch (e) {
    Get.snackbar('Erreur', 'Impossible de r√©cup√©rer les pr√©visions pour $city');
    print("‚ùå √âchec r√©cup√©ration des pr√©visions : $e");
  }
}

}
